install.packages("manipulate")
library(manipulate)
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
data(cars)
d
head(cars_
)
head(cars)
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
data(airquality)
install.packages(rcharts)
install.packages("rCharts")
install.packages("Rtools")
install.packages("devtools")
library(devtools)
install_github('rCharts', 'ramnathv')
require(rCharts)
dTable(airquality, sPaginationType = "full_numbers")
install.packages("shiny")
x <- 1:20
?rnorm
y <- 1:20 + rnorm(20)
y[20] <- 1
x <- 1:20
y <- 1:20 + rnorm(20)
y2 <- y
y2[20] <- 5
plot(x, y)
x <- 1:20
y <- 1:20 + rnorm(20)
y2 <- y
y2[20] <- 5
plot(x, y)
abline(lm(y~x))
x <- 1:20
y <- 1:20 + rnorm(20)
y2 <- y
y2[20] <- 5
plot(x, y)
abline(lm(y~x), color=red)
x <- 1:20
y <- 1:20 + rnorm(20)
y2 <- y
y2[20] <- 5
plot(x, y)
abline(lm(y~x), color="red")
x <- 1:20
y <- 1:20 + rnorm(20)
y2 <- y
y2[20] <- 5
plot(x, y)
abline(lm(y~x), colour="red")
?abline
x <- 1:20
y <- 1:20 + rnorm(20)
y2 <- y
y2[20] <- 5
plot(x, y2)
abline(lm(y2~x), colour="red")
library(ggplot2)
library(ggplot)
library(ggplot2)
install.packages("ggplot2")
library(ggplot2)
x <- 1:20
y <- 1:20 + rnorm(20)
y2 <- y
y2[20] <- 5
plot(x, y2, ylim=c(0,20))
abline(lm(y2~x), colour="red")
x <- 1:20
y <- 1:20 + rnorm(20)
y2 <- y
y2[20] <- 0
plot(x, y2, ylim=c(0,20), color="blue")
abline(lm(y2~x), colour="red")
x <- 1:20
y <- 1:20 + rnorm(20)
y2 <- y
y2[20] <- 0
plot(x, y2, ylim=c(0,20), col="blue")
abline(lm(y2~x), col="red")
x <- 1:20
y <- 1:20 + rnorm(20)
y2 <- y
y2[20] <- 0
plot(x, y2, ylim=c(0,20), col="black")
abline(lm(y2~x), col="red")
abline(lm(y2[1:19]~x[1:19]), col="blue")
x <- 1:20
y <- 1:20 + rnorm(20)
y2 <- y
y2[20] <- 0
plot(x, y2, ylim=c(0,20), col="black", main="Demostrating Leverage", xlab="x", ylab="y")
abline(lm(y2~x), col="red")
abline(lm(y2[1:19]~x[1:19]), col="blue")
x <- 1:20
y <- 1:20 + rnorm(20)
y2 <- y
y2[20] <- 0
plot(x, y2, ylim=c(0,20), col="black", main="Demostrating Leverage", xlab="x", ylab="y")
abline(lm(y2~x), col="red", lwd=2)
abline(lm(y2[1:19]~x[1:19]), col="blue", lwd=2)
x <- 1:20
y <- 1:20 + rnorm(20)
y2 <- y
y2[20] <- 0
plot(x, y2, ylim=c(0,20), col="black", main="Demostrating Leverage", xlab="x", ylab="y")
abline(lm(y2~x), col="red", lwd=3)
abline(lm(y2[1:19]~x[1:19]), col="blue", lwd=3)
x <- 1:20
y <- 1:20 + rnorm(20)
y2 <- y
y2[20] <- 0
plot(x, y2, ylim=c(0,20), col="black", main="Demostrating Leverage", xlab="x", ylab="y")
abline(lm(y2~x), col="red", lwd=3)
abline(lm(y2[1:19]~x[1:19]), col="blue", lwd=3)
x <- 1:20
y <- 1:20 + rnorm(20)
y2 <- y
y2[20] <- 0
plot(x, y2, ylim=c(0,20), col="black", main="Demostrating Leverage", xlab="x", ylab="y")
abline(lm(y2~x), col="red", lwd=3)
abline(lm(y2[1:19]~x[1:19]), col="blue", lwd=3)
x <- 1:20
y <- 1:20 + rnorm(20)
y2 <- y
y2[20] <- 0
plot(x, y2, ylim=c(0,20), col="black", main="Demostrating Leverage", xlab="x", ylab="y")
x <- 1:20
y <- 1:20 + rnorm(20)
y2 <- y
y2[20] <- 0
plot(x, y2, ylim=c(0,20), col="black", main="Demostrating Leverage", xlab="x", ylab="y")
points(x[20])
x <- 1:20
y <- 1:20 + rnorm(20)
y2 <- y
y2[20] <- 0
plot(x, y2, ylim=c(0,20), col="black", main="Demostrating Leverage", xlab="x", ylab="y")
points(x[20],y[20],col="green",lwd=4)
x <- 1:20
y <- 1:20 + rnorm(20)
y2 <- y
y2[20] <- 0
plot(x, y2, ylim=c(0,20), col="black", main="Demostrating Leverage", xlab="x", ylab="y")
points(x[20],y2[20],col="green",lwd=4)
x <- 1:20
y <- 1:20 + rnorm(20)
y2 <- y
y2[20] <- 0
plot(x, y2, ylim=c(0,20), col="black", main="Demostrating Leverage", xlab="x", ylab="y")
points(x[20],y2[20],col="green",lwd=10)
x <- 1:20
y <- 1:20 + rnorm(20)
y2 <- y
y2[20] <- 0
plot(x, y2, ylim=c(0,20), col="black", main="Demostrating Leverage", xlab="x", ylab="y")
points(x[20],y2[20],col="green",lwd=8)
x <- 1:20
y <- 1:20 + rnorm(20)
y2 <- y
y2[20] <- 0
plot(x, y2, ylim=c(0,20), col="black", main="Demostrating Leverage", xlab="x", ylab="y")
points(x[20],y2[20],col="green",lwd=8)
abline(lm(y2~x), col="red", lwd=3)
abline(lm(y2[1:19]~x[1:19]), col="blue", lwd=3)
x1 <- rnorm(1000,2,1)
x2 <- rnorm(1000,1,1) + rnorm(1000,1,1)
mean(x1)
mean(x2)
hist(x1)
hist(x2)
rand()
random()
runif()
runif(1)
runif(1)
runif(1)
x1 <- rnorm(1000,2,1)
x2[1:500] <- rnorm(500,0,1); x2[501:1000] <- rnorm(500,2,1)
mean(x1)
mean(x2)
x1 <- rnorm(1000,2,1)
x2[1:500] <- rnorm(500,0,1); x2[501:1000] <- rnorm(500,3,1)
mean(x1)
mean(x2)
x1 <- rnorm(1000,2,1)
x2[1:500] <- rnorm(500,0,1); x2[501:1000] <- rnorm(500,4,1)
mean(x1)
mean(x2)
x1 <- rnorm(1000,2,1)
x2[1:500] <- rnorm(500,0,1); x2[501:1000] <- rnorm(500,4,1)
mean(x1)
mean(x2)
x1 <- rnorm(1000,2,1)
x2[1:500] <- rnorm(500,0,1); x2[501:1000] <- rnorm(500,4,1)
mean(x1)
mean(x2)
hist(x1)
hist(x2)
nosim <- 100000
x1 <- rnorm(nosim,2,1)
x2[1:500] <- rnorm(nosim/2,0,1); x2[501:1000] <- rnorm(nosim/2,4,1)
mean(x1)
mean(x2)
hist(x1)
hist(x2)
nosim <- 100000
x1 <- rnorm(nosim,2,1)
x2[1:nosim/2] <- rnorm(nosim/2,0,1); x2[(nosim/2+1):nosim] <- rnorm(nosim/2,4,1)
mean(x1)
mean(x2)
hist(x1)
hist(x2)
nosim <- 100000
x1 <- rnorm(nosim,2,1)
x2[1:nosim/2] <- rnorm(nosim/2,0,1); x2[(nosim/2+1):nosim] <- rnorm(nosim/2,4,1)
mean(x1)
mean(x2)
hist(x2)
par(new=FALSE)
hist(x1)
nosim <- 100000
x1 <- rnorm(nosim,2,1)
x2[1:nosim/2] <- rnorm(nosim/2,0,1); x2[(nosim/2+1):nosim] <- rnorm(nosim/2,4,1)
mean(x1)
mean(x2)
hist(x2)
par(new=FALSE)
hist(x1)
x2
nosim <- 100000
x1 <- rnorm(nosim,2,1)
x2[1:nosim/2] <- rnorm(nosim/2,0,1); x2[(nosim/2+1):nosim] <- rnorm(nosim/2,4,1)
mean(x1)
mean(x2)
hist(x2)
par(new=FALSE)
hist(x1)
nosim <- 100000
x1 <- rnorm(nosim,2,1)
x2[1:nosim/2] <- rnorm(nosim/2,0,1); x2[(nosim/2+1):nosim] <- rnorm(nosim/2,4,1)
mean(x1)
mean(x2)
hist(x2)
par(new=TRUE)
hist(x1)
?hist
nosim <- 100000
x1 <- rnorm(nosim,2,1)
x2[1:nosim/2] <- rnorm(nosim/2,0,1); x2[(nosim/2+1):nosim] <- rnorm(nosim/2,4,1)
mean(x1)
mean(x2)
hist(x2, col="blue")
par(new=TRUE)
hist(x1, col="red")
nosim <- 100000
x1 <- rnorm(nosim,2,1)
x2[1:nosim/2] <- rnorm(nosim/2,0,1); x2[(nosim/2+1):nosim] <- rnorm(nosim/2,4,1)
mean(x1)
mean(x2)
hist(x2, col="blue")
hist(x1, col="red")
nosim <- 100000
x1 <- rnorm(nosim,2,1)
x2[1:nosim/2] <- rnorm(nosim/2,0,1); x2[(nosim/2+1):nosim] <- rnorm(nosim/2,4,1)
mean(x1)
mean(x2)
hist(x2, col="blue")
par(mfrow=c(1,2))
hist(x1, col="red")
nosim <- 100000
x1 <- rnorm(nosim,2,1)
x2[1:nosim/2] <- rnorm(nosim/2,0,1); x2[(nosim/2+1):nosim] <- rnorm(nosim/2,4,1)
mean(x1)
mean(x2)
par(mfrow=c(1,2))
hist(x1, col="red")
hist(x2, col="blue")
summary(x1)
summary(x2)
plot(x1,x2)
par(mfrow=c(1,1))
plot(x1,x2)
data(mtcars)
pairs(mtcars)
data(iris)
pairs(iris)
pairs(iris, col=Species)
pairs(iris, col=iris$Species)
boxplot(iris$Species ~ iris$Petal.Width)
?boxplot
boxplot(iris$Species ~ iris$Petal.Width, data=iris)
boxplot(Species ~ Petal.Width, data=iris)
iris$Species
iris$Petal.Width
boxplot(Species ~ Petal.Width, data=iris)
boxplot(Petal.Width ~ Petal.Height, data=iris)
names(iris)
boxplot(Petal.Width ~ Petal.Length, data=iris)
boxplot(Petal.Width ~ Species, data=iris)
boxplot(Petal.Width ~ Species, data=iris, main="Iris Data", xlab="Species", ylab="Petal Width", col=Species)
boxplot(Petal.Width ~ Species, data=iris, main="Iris Data", xlab="Species", ylab="Petal Width", col=iris$Species)
boxplot(Petal.Width ~ Species, data=iris, main="Iris Data", xlab="Species", ylab="Petal Width")
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
install.packages(c("caret","AppliedPredictiveModeling"))
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
names(training)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
trainIL<-training[,grep("^IL",names(training))]
testIL<-testing[,grep("^IL",names(testing))]
modelFit<-train(training$diagnosis~.,method="glm", data=trainIL)
pred<-predict(modelFit,testIL)
Acc<-confusionMatrix(testing$diagnosis,pred)
### PCA Approcah
pre<-preProcess(trainIL, method="pca", thresh=0.80)
trainPC<-predict(pre,trainIL)
modelFitpc<-train(training$diagnosis~.,method="glm", data=trainPC)
testPC<-predict(pre,testIL)
predPC<-predict(modelFitpc,testPC)
AccPC<-confusionMatrix(testing$diagnosis,predPC)
library(e1071)
install.packages("e1071")
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
trainIL<-training[,grep("^IL",names(training))]
testIL<-testing[,grep("^IL",names(testing))]
modelFit<-train(training$diagnosis~.,method="glm", data=trainIL)
pred<-predict(modelFit,testIL)
Acc<-confusionMatrix(testing$diagnosis,pred)
### PCA Approcah
pre<-preProcess(trainIL, method="pca", thresh=0.80)
trainPC<-predict(pre,trainIL)
modelFitpc<-train(training$diagnosis~.,method="glm", data=trainPC)
testPC<-predict(pre,testIL)
predPC<-predict(modelFitpc,testPC)
AccPC<-confusionMatrix(testing$diagnosis,predPC)
AccPC
Acc
odelFit<-train(training$diagnosis~.,method="glm", data=trainIL)
> pred<-predict(modelFit,testIL)
> Acc<-confusionMatrix(testing$diagnosis,pred)
modelFit <- train(training$diagnosis ~ ., method="glm", data=trainIL)
modelFit <- train(training$diagnosis ~ ., method="glm", data=trainIL)
pred <- predict(modelFit, testIL)
Acc <- confusionMatrix(testing$diagnosis,pred)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
hist(training$Superplasticizer)
hist(training$Superplasticizer, breaks=20)
hist(log(training$Superplasticizer), breaks=20)
summary(training$Sup)
summary(training$Superplasticizer)
setwd("~/Desktop/Google Drive/Projects/Online Courses/Coursera/John Hopkins Data Science Specialization/8 Practical Machine Learning/Assignments/Course Project")
train_url <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
test_url <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"aining.csv"
train_url <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
test_url <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
library(urllib)
download.file(train_url, destfile="training.csv")
download.file(test_url, destfile="testing.csv")
train_url <- "http://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
test_url <- "http://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
download.file(train_url, destfile="training.csv")
download.file(test_url, destfile="testing.csv")
file.exists("data")
!file.exists("data")
if (!file.exists("data")){
dir.create("data")
}
train_url <- "http://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
test_url <- "http://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
download.file(train_url, destfile="data/training.csv")
download.file(test_url, destfile="data/testing.csv")
training <- load.csv("data/training.csv", header=TRUE)
training <- loadcsv("data/training.csv", header=TRUE)
?csv
training <- read.csv("data/training.csv", header=TRUE)
testing <- read.csv("data/testing.csv", header=TRUE)
names(training)
str(training)
head(training)
?read.csv
training <- read.csv("data/training.csv", header=TRUE, na.strings=c("NA","","#DIV/0!"))
testing <- read.csv("data/testing.csv", header=TRUE, na.strings=c("NA","","#DIV/0!"))
head(training)
str(training)
unnecessary_variables <- c("X","user_name","raw_timestamp_part1","raw_timestamp_part_2","cvtd_timestamp","new_window","num_window")
training_clean <- training[,-unnecessary_variables]
training_clean <- training[,-c("X","user_name","raw_timestamp_part1","raw_timestamp_part_2","cvtd_timestamp","new_window","num_window")]
training_clean <- training[,-"X","user_name","raw_timestamp_part1","raw_timestamp_part_2","cvtd_timestamp","new_window","num_window")]
training_clean <- training[-unnecessary_variables]
testing_clean <- testing[-unnecessary_variables]
training_clean <- training[,!unnecessary_variables]
head(training[unnecessary_variables])
head(training[,unnecessary_variables])
names(training)
training_clean <- training[,-unnecessary_variables]
training_clean <- subset(training, select=-unnecessary_variables)
unnecessary_variables <- c(X,user_name,raw_timestamp_part1,raw_timestamp_part_2,cvtd_timestamp,new_window,num_window)
"
unnecessary_variables <- c("X","user_name","raw_timestamp_part1","raw_timestamp_part_2","cvtd_timestamp","new_window","num_window")
unnecessary_variables <- c("X","user_name","raw_timestamp_part1","raw_timestamp_part_2","cvtd_timestamp","new_window","num_window")
testing_clean <- testing[,!(names(testing) %in% unnecessary_variables]
testing_clean <- testing[,!(names(testing) %in% unnecessary_variables)]
training_clean <- training[,!(names(training) %in% unnecessary_variables)]
str(training_clean)
str(training_clean$classe)
library(caret)
suppressMessages(library(caret))
?train
inTrain <- createDataPartition(y=training_clean$classe, p=0.7, list=FALSE)
train <- training_clean[inTrain,]
test <- training_clean[-inTrain,]
?trainControl
seven_fold_cv = trainControl(method = "cv", number = 7)
modFit <- train(trainSet$classe ~ ., data = trainSet, method = "rf", trControl = seven_fold_cv)
seven_fold_cv = trainControl(method = "cv", number = 7)
modFit <- train(trainSet$classe ~ ., data = train, method = "rf", trControl = seven_fold_cv)
seven_fold_cv = trainControl(method = "cv", number = 7)
modFit <- train(trainSet$classe ~ ., data = train, method = "rf", trControl = seven_fold_cv)
seven_fold_cv = trainControl(method = "cv", number = 7)
modFit <- train(classe ~ ., data = train, method = "rf", trControl = seven_fold_cv)
training_clean==NA
is.na(training_clean)
?remove
remove.na
??remove.na
?complete
??complete
complete.cases(training_clean)
sum(complete.cases(training_clean))
sum(as.numeric(complete.cases(training_clean)))
complete.cases(training_clean)
as.numeric(complete.cases(training_clean))
complete.cases(training_clean)
training_clean[complete.cases(training_clean),]
head(training_clean)
?train
modFit <- train(classe ~ ., data = train, method = "rf", na.action="na.omit", trControl = seven_fold_cv)
head(training_clean)
complete.cases(training)
sum(complete.cases(training))
sum(complete.cases(training_clean))
NAs <- apply(training_clean, 2, function(x) {
sum(is.na(x))
})
NAs
mean(training_clean[,1])
mean(training_clean[,2])
mean(training_clean[,3])
mean(training_clean[,4])
mean(training_clean[,5])
mean(training_clean[,6])
mean(training_clean[,7])
NAs <- apply(trainBulk, 2, function(x) {
sum(is.na(x))
})
which(NAs == 0)
g
g
training_clean <- training_clean[,which(NAs == 0)]
testing_clean <- testing_clean[,which(NAs == 0)]
inTrain <- createDataPartition(y=training_clean$classe, p=0.7, list=FALSE)
train <- training_clean[inTrain,]
test <- training_clean[-inTrain,]
seven_fold_cv = trainControl(method = "cv", number = 7)
modFit <- train(classe ~ ., data = train, method = "rf", na.action=, trControl = seven_fold_cv)
library(randomForest)
modFit <- train(classe ~ ., data = train, method = "rf", na.action=, trControl = seven_fold_cv)
modFit <- train(classe ~ ., data = train, method = "rf", trControl = seven_fold_cv)
modFit$finalModel
modFit <- train(classe ~ ., data = train, method = "rf", trControl = seven_fold_cv)
four_fold_cv = trainControl(method = "cv", number = 4)
modFit <- train(classe ~ ., data = train, method = "rf", trControl = four_fold_cv)
